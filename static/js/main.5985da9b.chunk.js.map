{"version":3,"sources":["timer/timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","state","timerValue","props","time","timerProgress","timerStart","doIntervalChange","timerReset","clearInterval","timerInterval","this","autostart","nextProps","nextState","step","setInterval","onTick","setState","prevstate","timerIndicatorWidth","className","style","width","onClick","Component","App","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2QA+EeA,G,wNA3EXC,MAAQ,CACJC,WAAY,EAAKC,MAAMC,KACvBC,cAAe,EAAKF,MAAMC,M,EAyC9BE,WAAa,WACT,EAAKC,oB,EAGTC,WAAa,WACTC,cAAc,EAAKC,gB,kEA1CnBC,KAAKR,MAAMS,WACXD,KAAKJ,qB,4CAIaM,EAAUC,GAC5B,SAA6B,KAAxBA,EAAUZ,WAAW,GAAUS,KAAKR,MAAMY,Q,6CAO/CN,cAAcE,KAAKD,iB,yCAGH,IAAD,OACXC,KAAKD,cAAgBM,aAAY,WACzB,EAAKf,MAAMC,WAAa,GACxB,EAAKC,MAAMc,OAAO,EAAKhB,MAAMC,YAC7B,EAAKgB,UAAS,SAACC,GACX,MAAO,CACHjB,WAAYiB,EAAUjB,WAAa,EACnCG,cAAec,EAAUd,cAAc,QAI/C,EAAKF,MAAMc,OAAO,GAClB,EAAKC,SAAS,CACVhB,WAAY,EACZG,cAAe,IAEnBI,cAAc,EAAKC,kBAExB,O,+BAaP,IAAIU,EAAsBT,KAAKV,MAAMI,cAAgBM,KAAKR,MAAMC,KAAO,IACvE,OACI,yBAAKiB,UAAU,cACX,qCACA,gIAA0BV,KAAKV,MAAMC,YAArC,KAEA,yBAAKmB,UAAU,aACX,yBAAKA,UAAU,kBAAkBC,MAAO,CAACC,MAAOH,EAAqB,QAGzE,yBAAKC,UAAU,YACX,4BAAQA,UAAU,gBAAgBG,QAAWb,KAAKL,YAAlD,SACA,4BAAQe,UAAU,eAAeG,QAAWb,KAAKH,YAAjD,c,GAlEAiB,cCeLC,E,uKAVb,OACI,kBAAC,EAAD,CAAOtB,KAAQ,GACTQ,WAAS,EACTG,KAAO,IACPE,OAAU,SAACb,GAAD,OAAUuB,QAAQC,IAAI,0FAAsBxB,U,GAPhDqB,aCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.5985da9b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './timer.css';\r\n\r\nclass Timer extends Component {\r\n    state = {\r\n        timerValue: this.props.time,\r\n        timerProgress: this.props.time\r\n    }\r\n\r\n    componentDidMount() {\r\n    if (this.props.autostart) {\r\n        this.doIntervalChange()\r\n        }      \r\n    }\r\n\r\n    shouldComponentUpdate(nextProps,nextState) {\r\n        if ((nextState.timerValue-1)*1000 % this.props.step) {\r\n            return true\r\n        } else {\r\n            return false\r\n        }}\r\n\r\n    componentWillUnmount(){\r\n        clearInterval(this.timerInterval)\r\n    }\r\n\r\n    doIntervalChange() {\r\n            this.timerInterval = setInterval(() => {\r\n                if (this.state.timerValue > 0) {\r\n                    this.props.onTick(this.state.timerValue);\r\n                    this.setState((prevstate) => {\r\n                        return {\r\n                            timerValue: prevstate.timerValue - 1,\r\n                            timerProgress: prevstate.timerProgress-1\r\n                        }\r\n                    })\r\n                } else {\r\n                    this.props.onTick(0);\r\n                    this.setState({\r\n                        timerValue: 0,\r\n                        timerProgress: 0\r\n                    })\r\n                    clearInterval(this.timerInterval)\r\n                }\r\n            }, 1000)  \r\n    }\r\n    \r\n    timerStart = () => {\r\n        this.doIntervalChange()\r\n     }\r\n\r\n    timerReset = () => {\r\n        clearInterval(this.timerInterval)\r\n    }\r\n    \r\n    \r\n    render() {\r\n        let timerIndicatorWidth = this.state.timerProgress / this.props.time * 100;\r\n        return(\r\n            <div className=\"timer_wrap\">\r\n                <h1>Timer</h1>\r\n                <p> { `Залишилось часу: ${this.state.timerValue}`} </p>\r\n\r\n                <div className=\"timer_bar\">\r\n                    <div className=\"timer_indicator\" style={{width: timerIndicatorWidth +'%'}}></div>\r\n                </div>\r\n\r\n                <div className=\"btn_wrap\">\r\n                    <button className=\"btn btn_start\" onClick = {this.timerStart}>Start</button>\r\n                    <button className=\"btn btn_stop\" onClick = {this.timerReset}>Stop</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Timer;","import React, {Component} from 'react';\nimport './App.css';\nimport Timer from './timer/timer';\n\n\nclass App extends Component {\n  \n  render(){\n  return (\n      <Timer time = {30}\n            autostart\n            step ={2000} \n            onTick = {(time) => console.log(\"Залишилось часу: \" + time)}\n            />\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}